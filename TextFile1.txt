 public class InputBuffer
    {
        //TODO: if end of program has been reached, do not ask for input, but pad the rest of this with zeros
        public BitArray readBuffer = new BitArray(0);
        int inputCursor = -1;

        public bool OneBitFromBuffer()
        {
            while (inputCursor >= readBuffer.Length - 1)
            {
                string input = Console.ReadLine();
                readBuffer = new BitArray(Encoding.ASCII.GetBytes(input.ToCharArray()));
                inputCursor = -1;
            }
            inputCursor += 1;
            return readBuffer[inputCursor];
        }
    }
    public class OutputBuffer
    {
        //TODO: send whatever we have (padded with zeros) to stdout when end of program is reached
        public BitArray outBuffer = new BitArray(8);
        int outputCursor = 0;
        public void Dump(bool value)
        {
            if (outputCursor < 8)
            {
                outBuffer[outputCursor] = value;
                outputCursor += 1;
            }
            if (outputCursor == 8)
            {
                byte[] outputByte = new byte[1];
                outBuffer.CopyTo(outputByte, 0);
                Console.Write(Encoding.ASCII.GetString(outputByte));
                outputCursor = 0;
                outBuffer[outputCursor] = value;
            }
        }
    }
















    [TestMethod]
        public void TestInputBuffer()
        {
            InputBuffer inputBuffer = new InputBuffer();
            inputBuffer.readBuffer = new BitArray(new byte[] { 97, 98, 99 });
            List<bool> testBits = new List<bool>() { true, false, false, false, false, true, true, false,
             false, true, false, false, false, true, true, false,
             true, true, false, false, false, true, true, false };
            //abc
            //97,98,99
            //("True ", "False", "False ", "False ", "False ", "True ", "True ", "False", 
            // "False", "True ", "False ", "False ", "False ", "True ", "True ", "False", 
            // "True ", "True ", "False ", "False ", "False ", "True ", "True ", "False")
            foreach (bool i in testBits)
            {
                Assert.AreEqual(i, inputBuffer.OneBitFromBuffer());
            }
            var emulatedInput = new System.IO.StringReader("abc");
            Console.SetIn(emulatedInput);
            foreach (bool i in testBits)
            {
                Assert.AreEqual(i, inputBuffer.OneBitFromBuffer());
            }

        }



    
    [TestClass]
    public class OutputTests
    {
        public System.IO.StringWriter w;
        private string _consoleOutput;
        OutputBuffer outputBuffer;

        List<bool> testBits24 = new List<bool>()
                { true, false, false, false, false, true, true, false,
             false, true, false, false, false, true, true, false,
             true, true, false, false, false, true, true, false };

        List<bool> testBits23 = new List<bool>()
                { true, false, false, false, false, true, true, false,
             false, true, false, false, false, true, true, false,
             true, true, false, false, false, true, false };

        List<bool> testBits0 = new List<bool>()
        { };

        public string TestOutputBuffer(List<bool> outputB)
        {
            outputBuffer = new OutputBuffer();
            w = new System.IO.StringWriter();
            Console.SetOut(w);
            foreach (var i in outputB)
            {
                outputBuffer.Dump(i);
            }
            _consoleOutput = w.GetStringBuilder().ToString().Trim();
            return _consoleOutput;
        }
        [TestMethod]
        public void TestOutputs()
        {
            Assert.AreEqual(TestOutputBuffer(testBits24), "abc");
            Assert.AreEqual(TestOutputBuffer(testBits23), "ab");
            Assert.AreEqual(TestOutputBuffer(testBits0), "");
        }


    }